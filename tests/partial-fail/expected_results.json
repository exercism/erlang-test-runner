{
  "status": "fail",
  "tests": [
    {
      "name": "year not divisible by 4 in common year",
      "status": "pass"
    },
    {
      "name": "year divisible by 2, not divisible by 4 in common year",
      "status": "pass"
    },
    {
      "name": "year divisible by 4, not divisible by 100 in leap year",
      "status": "pass"
    },
    {
      "name": "year divisible by 4 and 5 is still a leap year",
      "status": "pass"
    },
    {
      "name": "year divisible by 100, not divisible by 400 in common year",
      "status": "pass"
    },
    {
      "name": "year divisible by 100 but not by 3 is still not a leap year",
      "status": "pass"
    },
    {
      "message": "The expression `partial_fail : leap_year ( 2000 )` was expected to return `true`, but it returned `false` instead",
      "name": "year divisible by 400 is leap year",
      "status": "fail",
      "test_code": "'7_year_divisible_by_400_is_leap_year_test_'() ->\n    {\"year divisible by 400 is leap year\",\n     {45,\n      fun() ->\n             begin\n                 fun() ->\n                        X__T = is_process_alive(self()),\n                        case partial_fail:leap_year(2000) of\n                            X__T ->\n                                ok;\n                            X__V ->\n                                error({assert,\n                                       [{module, partial_fail_tests},\n                                        {line, 45},\n                                        {expression,\n                                         \"partial_fail : leap_year ( 20\"\n                                         \"00 )\"},\n                                        {expected, true},\n                                        case not X__T of\n                                            X__V ->\n                                                {value, false};\n                                            _ ->\n                                                {not_boolean, X__V}\n                                        end]})\n                        end\n                 end()\n             end\n      end}}.\n"
    },
    {
      "message": "The expression `partial_fail : leap_year ( 2400 )` was expected to return `true`, but it returned `false` instead",
      "name": "year divisible by 400 but not by 125 is still a leap year",
      "status": "fail",
      "test_code": "'8_year_divisible_by_400_but_not_by_125_is_still_a_leap_year_test_'() ->\n    {\"year divisible by 400 but not by 125 is still a leap year\",\n     {50,\n      fun() ->\n             begin\n                 fun() ->\n                        X__T = is_process_alive(self()),\n                        case partial_fail:leap_year(2400) of\n                            X__T ->\n                                ok;\n                            X__V ->\n                                error({assert,\n                                       [{module, partial_fail_tests},\n                                        {line, 50},\n                                        {expression,\n                                         \"partial_fail : leap_year ( 24\"\n                                         \"00 )\"},\n                                        {expected, true},\n                                        case not X__T of\n                                            X__V ->\n                                                {value, false};\n                                            _ ->\n                                                {not_boolean, X__V}\n                                        end]})\n                        end\n                 end()\n             end\n      end}}.\n"
    },
    {
      "name": "year divisible by 200, not divisible by 400 in common year",
      "status": "pass"
    }
  ],
  "version": 2
}
